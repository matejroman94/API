// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Database.Migrations
{
    [DbContext(typeof(VZPStatDbContext))]
    [Migration("20221116094425_Initialize")]
    partial class Initialize
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("statistics")
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AppRole", b =>
                {
                    b.Property<int>("AppsAppId")
                        .HasColumnType("int");

                    b.Property<int>("RolesRoleId")
                        .HasColumnType("int");

                    b.HasKey("AppsAppId", "RolesRoleId");

                    b.HasIndex("RolesRoleId");

                    b.ToTable("AppRole", "app");
                });

            modelBuilder.Entity("BranchUser", b =>
                {
                    b.Property<int>("BranchesBranchId")
                        .HasColumnType("int");

                    b.Property<int>("UsersUserId")
                        .HasColumnType("int");

                    b.HasKey("BranchesBranchId", "UsersUserId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("BranchUser", "statistics");
                });

            modelBuilder.Entity("ClerkCounter", b =>
                {
                    b.Property<int>("ClerksClerkId")
                        .HasColumnType("int");

                    b.Property<int>("CountersCounterId")
                        .HasColumnType("int");

                    b.HasKey("ClerksClerkId", "CountersCounterId");

                    b.HasIndex("CountersCounterId");

                    b.ToTable("ClerkCounter", "statistics");
                });

            modelBuilder.Entity("Domain.Models.Activity", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivityId"), 1L, 1);

                    b.Property<string>("ActivityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("ActivityId");

                    b.HasIndex("BranchId");

                    b.ToTable("Activity", "statistics");
                });

            modelBuilder.Entity("Domain.Models.App", b =>
                {
                    b.Property<int>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppId"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShowBranches")
                        .HasColumnType("bit");

                    b.HasKey("AppId");

                    b.ToTable("App", "app");
                });

            modelBuilder.Entity("Domain.Models.Branch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BranchId"), 1L, 1);

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Online")
                        .HasColumnType("bit");

                    b.Property<string>("Port")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<string>("VZP_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BranchId");

                    b.HasIndex("RegionId");

                    b.ToTable("Branch", "statistics");
                });

            modelBuilder.Entity("Domain.Models.Clerk", b =>
                {
                    b.Property<int>("ClerkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClerkId"), 1L, 1);

                    b.Property<string>("ClerkName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClerkStatusId")
                        .HasColumnType("int");

                    b.Property<int>("CounterSignInId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("ClerkId");

                    b.HasIndex("ClerkStatusId");

                    b.ToTable("Clerk", "statistics");
                });

            modelBuilder.Entity("Domain.Models.ClerkEvent", b =>
                {
                    b.Property<int>("ClerkEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClerkEventId"), 1L, 1);

                    b.Property<int>("ClerkId")
                        .HasColumnType("int");

                    b.Property<int>("ClerkStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ClerkEventId");

                    b.HasIndex("ClerkId");

                    b.HasIndex("ClerkStatusId");

                    b.ToTable("ClerkEvent", "statistics");
                });

            modelBuilder.Entity("Domain.Models.ClerkStatus", b =>
                {
                    b.Property<int>("ClerkStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClerkStatusId"), 1L, 1);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClerkStatusId");

                    b.ToTable("ClerkStatus", "statistics");
                });

            modelBuilder.Entity("Domain.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"), 1L, 1);

                    b.Property<int?>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int?>("ClerkId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientDoneId")
                        .HasColumnType("int");

                    b.Property<int>("ClientOrdinalNumber")
                        .HasColumnType("int");

                    b.Property<int?>("ClientStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("CounterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PrinterId")
                        .HasColumnType("int");

                    b.Property<bool>("Priority")
                        .HasColumnType("bit");

                    b.Property<int>("ServiceWaiting")
                        .HasColumnType("int");

                    b.Property<int>("WaitingTime")
                        .HasColumnType("int");

                    b.HasKey("ClientId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("BranchId");

                    b.HasIndex("ClerkId");

                    b.HasIndex("ClientDoneId");

                    b.HasIndex("ClientStatusId");

                    b.HasIndex("CounterId");

                    b.HasIndex("PrinterId");

                    b.ToTable("Client", "statistics");
                });

            modelBuilder.Entity("Domain.Models.ClientStatus", b =>
                {
                    b.Property<int>("ClientStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientStatusId"), 1L, 1);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientStatusId");

                    b.ToTable("ClientStatus", "statistics");
                });

            modelBuilder.Entity("Domain.Models.Counter", b =>
                {
                    b.Property<int>("CounterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CounterId"), 1L, 1);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("ClerkSignInId")
                        .HasColumnType("int");

                    b.Property<string>("CounterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CounterStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustNum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("CounterId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CounterStatusId");

                    b.ToTable("Counter", "statistics");
                });

            modelBuilder.Entity("Domain.Models.CounterStatus", b =>
                {
                    b.Property<int>("CounterStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CounterStatusId"), 1L, 1);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CounterStatusId");

                    b.ToTable("CounterStatus", "statistics");
                });

            modelBuilder.Entity("Domain.Models.Diagnostic", b =>
                {
                    b.Property<int>("DiagnosticId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiagnosticId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiagnosticId");

                    b.ToTable("Diagnostic", "statistics");
                });

            modelBuilder.Entity("Domain.Models.DiagnosticBranch", b =>
                {
                    b.Property<int>("DiagnosticBranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiagnosticBranchId"), 1L, 1);

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DiagnosticData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DiagnosticId")
                        .HasColumnType("int");

                    b.Property<int?>("PeriphNumber")
                        .HasColumnType("int");

                    b.Property<int?>("PeriphTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Pin")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiagnosticBranchId");

                    b.HasIndex("BranchId");

                    b.HasIndex("DiagnosticId");

                    b.HasIndex("PeriphTypeId");

                    b.ToTable("DiagnosticBranch", "statistics");
                });

            modelBuilder.Entity("Domain.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"), 1L, 1);

                    b.Property<int?>("Activity")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int?>("Clerk")
                        .HasColumnType("int");

                    b.Property<int?>("ClientOrdinalNumber")
                        .HasColumnType("int");

                    b.Property<int?>("Counter")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DateReceived")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DiagnosticData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DiagnosticId")
                        .HasColumnType("int");

                    b.Property<int?>("DiagnosticPeriphOrdinalNumber")
                        .HasColumnType("int");

                    b.Property<int?>("DiagnosticPeriphTypeId")
                        .HasColumnType("int");

                    b.Property<string>("DiagnosticPin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EstimateWaiting")
                        .HasColumnType("int");

                    b.Property<string>("EventCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventHex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventHour")
                        .HasColumnType("int");

                    b.Property<int>("EventMinute")
                        .HasColumnType("int");

                    b.Property<int>("EventNameId")
                        .HasColumnType("int");

                    b.Property<int>("EventSecond")
                        .HasColumnType("int");

                    b.Property<bool>("FullyProcessed")
                        .HasColumnType("bit");

                    b.Property<int?>("NewActivity")
                        .HasColumnType("int");

                    b.Property<int?>("NewClerk")
                        .HasColumnType("int");

                    b.Property<int?>("NewCounter")
                        .HasColumnType("int");

                    b.Property<string>("PacketData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PacketNumOfBytes")
                        .HasColumnType("int");

                    b.Property<int?>("PacketTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("PeriphTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("PrinterCurrentStateId")
                        .HasColumnType("int");

                    b.Property<int?>("PrinterNumber")
                        .HasColumnType("int");

                    b.Property<int?>("PrinterPreviousStateId")
                        .HasColumnType("int");

                    b.Property<int?>("ReasonId")
                        .HasColumnType("int");

                    b.Property<int?>("ReasonSignout")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceWaiting")
                        .HasColumnType("int");

                    b.Property<int?>("WaitingTime")
                        .HasColumnType("int");

                    b.HasKey("EventId");

                    b.HasIndex("BranchId");

                    b.HasIndex("DiagnosticId");

                    b.HasIndex("EventNameId");

                    b.HasIndex("PacketTypeId");

                    b.HasIndex("PeriphTypeId");

                    b.HasIndex("PrinterCurrentStateId");

                    b.HasIndex("PrinterPreviousStateId");

                    b.HasIndex("ReasonId");

                    b.ToTable("Event", "statistics");
                });

            modelBuilder.Entity("Domain.Models.EventName", b =>
                {
                    b.Property<int>("EventNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventNameId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EventNameId");

                    b.ToTable("EventName", "statistics");
                });

            modelBuilder.Entity("Domain.Models.Logger", b =>
                {
                    b.Property<int>("LoggerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoggerId"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LoggerId");

                    b.ToTable("Logger", "statistics");
                });

            modelBuilder.Entity("Domain.Models.PacketDataType", b =>
                {
                    b.Property<int>("ExtendedDataTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExtendedDataTypeId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExtendedDataTypeId");

                    b.ToTable("PacketDataType", "statistics");
                });

            modelBuilder.Entity("Domain.Models.PeriphType", b =>
                {
                    b.Property<int>("PerihTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PerihTypeId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PerihTypeId");

                    b.ToTable("PeriphType", "statistics");
                });

            modelBuilder.Entity("Domain.Models.Printer", b =>
                {
                    b.Property<int>("PrinterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrinterId"), 1L, 1);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("PrinterCurrentStateId")
                        .HasColumnType("int");

                    b.Property<string>("PrinterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrinterPreviousStateId")
                        .HasColumnType("int");

                    b.HasKey("PrinterId");

                    b.HasIndex("BranchId");

                    b.HasIndex("PrinterCurrentStateId");

                    b.HasIndex("PrinterPreviousStateId");

                    b.ToTable("Printer", "statistics");
                });

            modelBuilder.Entity("Domain.Models.PrinterCurrentStatus", b =>
                {
                    b.Property<int>("PrinterCurrentStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrinterCurrentStatusId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PrinterCurrentStatusId");

                    b.ToTable("PrinterCurrentStatus", "statistics");
                });

            modelBuilder.Entity("Domain.Models.PrinterPreviousStatus", b =>
                {
                    b.Property<int>("PrinterPreviousStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrinterPreviousStatusId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PrinterPreviousStatusId");

                    b.ToTable("PrinterPreviousStatus", "statistics");
                });

            modelBuilder.Entity("Domain.Models.Reason", b =>
                {
                    b.Property<int>("ReasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReasonId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReasonId");

                    b.ToTable("Reason", "statistics");
                });

            modelBuilder.Entity("Domain.Models.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegionId"), 1L, 1);

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RegionId");

                    b.ToTable("Region", "statistics");
                });

            modelBuilder.Entity("Domain.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Role", "app");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("User", "app");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<int>("RolesRoleId")
                        .HasColumnType("int");

                    b.Property<int>("UsersUserId")
                        .HasColumnType("int");

                    b.HasKey("RolesRoleId", "UsersUserId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("RoleUser", "app");
                });

            modelBuilder.Entity("AppRole", b =>
                {
                    b.HasOne("Domain.Models.App", null)
                        .WithMany()
                        .HasForeignKey("AppsAppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BranchUser", b =>
                {
                    b.HasOne("Domain.Models.Branch", null)
                        .WithMany()
                        .HasForeignKey("BranchesBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClerkCounter", b =>
                {
                    b.HasOne("Domain.Models.Clerk", null)
                        .WithMany()
                        .HasForeignKey("ClerksClerkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Counter", null)
                        .WithMany()
                        .HasForeignKey("CountersCounterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Activity", b =>
                {
                    b.HasOne("Domain.Models.Branch", "Branch")
                        .WithMany("Activities")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Domain.Models.Branch", b =>
                {
                    b.HasOne("Domain.Models.Region", "Region")
                        .WithMany("Branches")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Domain.Models.Clerk", b =>
                {
                    b.HasOne("Domain.Models.ClerkStatus", null)
                        .WithMany("Clerks")
                        .HasForeignKey("ClerkStatusId");
                });

            modelBuilder.Entity("Domain.Models.ClerkEvent", b =>
                {
                    b.HasOne("Domain.Models.Clerk", "Clerk")
                        .WithMany("ClerkEvents")
                        .HasForeignKey("ClerkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.ClerkStatus", "ClerkStatus")
                        .WithMany("ClerkEvents")
                        .HasForeignKey("ClerkStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clerk");

                    b.Navigation("ClerkStatus");
                });

            modelBuilder.Entity("Domain.Models.Client", b =>
                {
                    b.HasOne("Domain.Models.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId");

                    b.HasOne("Domain.Models.Branch", "Branch")
                        .WithMany("Clients")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Clerk", "Clerk")
                        .WithMany("Clients")
                        .HasForeignKey("ClerkId");

                    b.HasOne("Domain.Models.Reason", "ClientDone")
                        .WithMany("Clients")
                        .HasForeignKey("ClientDoneId");

                    b.HasOne("Domain.Models.ClientStatus", "ClientStatus")
                        .WithMany("Clients")
                        .HasForeignKey("ClientStatusId");

                    b.HasOne("Domain.Models.Counter", "Counter")
                        .WithMany("Clients")
                        .HasForeignKey("CounterId");

                    b.HasOne("Domain.Models.Printer", "Printer")
                        .WithMany("Clients")
                        .HasForeignKey("PrinterId");

                    b.Navigation("Activity");

                    b.Navigation("Branch");

                    b.Navigation("Clerk");

                    b.Navigation("ClientDone");

                    b.Navigation("ClientStatus");

                    b.Navigation("Counter");

                    b.Navigation("Printer");
                });

            modelBuilder.Entity("Domain.Models.Counter", b =>
                {
                    b.HasOne("Domain.Models.Branch", "Branch")
                        .WithMany("Counters")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.CounterStatus", "CounterStatus")
                        .WithMany("Counters")
                        .HasForeignKey("CounterStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("CounterStatus");
                });

            modelBuilder.Entity("Domain.Models.DiagnosticBranch", b =>
                {
                    b.HasOne("Domain.Models.Branch", "Branch")
                        .WithMany("DiagnosticBranches")
                        .HasForeignKey("BranchId");

                    b.HasOne("Domain.Models.Diagnostic", "Diagnostic")
                        .WithMany("StatusBranches")
                        .HasForeignKey("DiagnosticId");

                    b.HasOne("Domain.Models.PeriphType", "PeriphType")
                        .WithMany("StatusBranches")
                        .HasForeignKey("PeriphTypeId");

                    b.Navigation("Branch");

                    b.Navigation("Diagnostic");

                    b.Navigation("PeriphType");
                });

            modelBuilder.Entity("Domain.Models.Event", b =>
                {
                    b.HasOne("Domain.Models.Branch", "Branch")
                        .WithMany("Events")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Diagnostic", "Diagnostic")
                        .WithMany("Events")
                        .HasForeignKey("DiagnosticId");

                    b.HasOne("Domain.Models.EventName", "EventName")
                        .WithMany("Events")
                        .HasForeignKey("EventNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.PacketDataType", "PacketType")
                        .WithMany("Events")
                        .HasForeignKey("PacketTypeId");

                    b.HasOne("Domain.Models.PeriphType", "DiagnosticPeriphType")
                        .WithMany("Events")
                        .HasForeignKey("PeriphTypeId");

                    b.HasOne("Domain.Models.PrinterCurrentStatus", "PrinterCurrentStatus")
                        .WithMany()
                        .HasForeignKey("PrinterCurrentStateId");

                    b.HasOne("Domain.Models.PrinterPreviousStatus", "PrinterPreviousStatus")
                        .WithMany()
                        .HasForeignKey("PrinterPreviousStateId");

                    b.HasOne("Domain.Models.Reason", "Reason")
                        .WithMany("Events")
                        .HasForeignKey("ReasonId");

                    b.Navigation("Branch");

                    b.Navigation("Diagnostic");

                    b.Navigation("DiagnosticPeriphType");

                    b.Navigation("EventName");

                    b.Navigation("PacketType");

                    b.Navigation("PrinterCurrentStatus");

                    b.Navigation("PrinterPreviousStatus");

                    b.Navigation("Reason");
                });

            modelBuilder.Entity("Domain.Models.Printer", b =>
                {
                    b.HasOne("Domain.Models.Branch", "Branch")
                        .WithMany("Printers")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.PrinterCurrentStatus", "PrinterCurrentStatus")
                        .WithMany("Printers")
                        .HasForeignKey("PrinterCurrentStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.PrinterPreviousStatus", "PrinterPreviousStatus")
                        .WithMany("Printers")
                        .HasForeignKey("PrinterPreviousStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("PrinterCurrentStatus");

                    b.Navigation("PrinterPreviousStatus");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("Domain.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Branch", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Clients");

                    b.Navigation("Counters");

                    b.Navigation("DiagnosticBranches");

                    b.Navigation("Events");

                    b.Navigation("Printers");
                });

            modelBuilder.Entity("Domain.Models.Clerk", b =>
                {
                    b.Navigation("ClerkEvents");

                    b.Navigation("Clients");
                });

            modelBuilder.Entity("Domain.Models.ClerkStatus", b =>
                {
                    b.Navigation("ClerkEvents");

                    b.Navigation("Clerks");
                });

            modelBuilder.Entity("Domain.Models.ClientStatus", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("Domain.Models.Counter", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("Domain.Models.CounterStatus", b =>
                {
                    b.Navigation("Counters");
                });

            modelBuilder.Entity("Domain.Models.Diagnostic", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("StatusBranches");
                });

            modelBuilder.Entity("Domain.Models.EventName", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Domain.Models.PacketDataType", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Domain.Models.PeriphType", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("StatusBranches");
                });

            modelBuilder.Entity("Domain.Models.Printer", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("Domain.Models.PrinterCurrentStatus", b =>
                {
                    b.Navigation("Printers");
                });

            modelBuilder.Entity("Domain.Models.PrinterPreviousStatus", b =>
                {
                    b.Navigation("Printers");
                });

            modelBuilder.Entity("Domain.Models.Reason", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("Domain.Models.Region", b =>
                {
                    b.Navigation("Branches");
                });
#pragma warning restore 612, 618
        }
    }
}
